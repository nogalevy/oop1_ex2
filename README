OOP1 ex2 - Save the King

Written by: Tali Kalev, ID:208629691 èìé ëìá
            Noga Levy, ID:315260927 ðåâä ìåé

General Description of the Exercise:
	In this exercises we were requested to implement a game called Save the King.
	The goal of the game is to bring the King to his throne with the help of his 
	friends that all have different abilities. There are three different levels 
	to the game (more can be added by adding files with the respective information
	needed). Other than the King there are 3 other interactable characters: Mage,
	Warrior and Thief. The user controls these characters in order to win the level
	and subsequently the game.

Design:

Character Classes:

The King = K
	- GOAL: to sit on chair
	- represented on the board as the letter K
	- can walk on empty tiles or tiles with a key on it (cant pick up key)
	- can enter teleport cell
	- can sit on chair

Mage = M
	- Abilities: can put out fires by stepping on tiles on fire (turns them to empty tiles)
	- can step on empty tiles
	- can step on tiles with key (can't pick them up)
	- can stand on teleport cell but not use it 

Warrior = W
	- Abilities: can fight off orcs, always wins
	- turns orc into key upon killing it, tile turns to tile key
	- can step on empty tiles and ones with orcs, that’s how he kills them
	- can step on tiles with key (can't pick them up)
	- can enter teleport cell

Thief = T
	- Abilities: can take keys and open gates with them
	- all keys open all gates (can only hold one key at a time)
	- can step on empty tiles 
	- can step on tiles with key
	- can enter teleport cell 
	- can step on tiles with gates *if* he has a key (changes it to empty tile)


Types of Tiles:

Empty Tile = "space"
	- tile with no objects or characters

Wall = "="
	- no characters can pass 

Gate = "#"
	- only theif can step on it if he has a key
	- he can go through it and then the tile turns to empty tile

Fire = "*"
	- only mage can step on it, blocks others
	- if mage steps on it, tile will turn to empty tile


Teleport Cell = "X"
	- type of tile that comes in pairs
	- all characters (excluding mage) that enters cell, teleports immediately to
		parallel port - character disappears from one appears in the other
	- the tile that the character teleports to is considered the original teleport cell's "partner"
	- mage cant use but can step on
	- teleports cells are exclusive

Kings Throne = "@"
	- only king can sit on the throne
	- that’s how we win the level

Additional Objects:

Orc = "!"
	- blocks all characters (cannot pass the tile he is standing, other than warrior)
	- if warrior comes and kills him, a key "falls from his pocket" -> tile turns to one with key

Key = F
	- falls from orc when warrior kills it 
	- thief can take it


Game Implementation:

Keys
	- P =  changes between characters in a cyclical way
	- Arrows = moves character on board, unless not allowed
	- Escape = ends game

Game Levels
	- at least 3 levels
	- each level will receive the following required information from file
		Size of Board
		Board
		Location of King
		Location of Mage
		Location of Warrior
		Location of Thief
		Number of Pairs of Teleporting cells
		Location of cell 1.1 and 1.2
		(and more if they exist)

Game Board
	- after each action the board is updated on the screen (including change in active character)
	- under is printed: 
		1. name of active character
		2. sum of number of steps taken (of all characters)
		3. if the theif has the key or not
	- if two objects take up the same space, present the character over the static


Name of Files Created:
	In Include Folder:
		-Board.h - header of Board.cpp
		-Controller.h - header of Controller.cpp
		-io.h
		-King.h - header of King.cpp
		-Location.h - contains struct of type location holding indexes
		-Mage.h - header of Mage.cpp
		-Player.h - header of Player.cpp
		-Theif.h - header of Theif.cpp
		-Utilities.h - contains struct holding teleport cells locations
		-Warrior.h - header of Warrior.cpp
	In levels Folder:
		-level1.txt
		-level2.txt
		-level3.txt
	In src Folder:
		-Board.cpp - contains functions pertaining to the game board
		-Controller.cpp - contains functions that use the user input to control the characters/board
		-io.cpp
		-King.cpp - contains functions pertaining to the King class character
		-Mage.cpp - contains functions pertaining to the Mage class character
		-Theif.cpp - contains functions pertaining to the Thief class character
		-Warrior.cpp - contains functions pertaining to the Warrior class character
		-Utilities.cpp

Main Data Structures and their Responsibilities:
	All 4 playable characters (King, Mage, Warrior, Theif) are defined as class objects.
	Their appropriate functions contain and receive information regarding location, abilities,
	capabilities for moves and more. The Board is also classified as a class object in which 
	contains information regarding the data on the board (including characters). 

There are no notable algorithms that were implemented in this program.

Bugs:
	The 'p' key switch between the characters but sometimes its not working for some reason
	when continue to level 2 Mage dosent move
	when finish game alert msg like in the privious levels and not something for end of the game
	teleports not working 

Additional Notes:
	We know we have in the code alot of duplicated code
